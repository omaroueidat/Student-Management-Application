// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entites.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240715210218_Api_3")]
    partial class Api_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CodeValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("AddressId");

                    b.HasIndex("CodeValueId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            AddressId = new Guid("179e627d-26a5-4a4b-b0a2-331518945033"),
                            AddressValue = "Street-1 Region X Buiding Y Floor Z",
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac2"),
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51150"),
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f771"),
                            isPrimary = true
                        },
                        new
                        {
                            AddressId = new Guid("179e627d-26a5-4a4b-b0a2-331518945034"),
                            AddressValue = "Street-1 Region X Buiding Y Floor Z",
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac3"),
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51151"),
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f772"),
                            isPrimary = true
                        },
                        new
                        {
                            AddressId = new Guid("179e627d-26a5-4a4b-b0a2-331518945035"),
                            AddressValue = "Street-1 Region X Buiding Y Floor Z",
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac3"),
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51152"),
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f773"),
                            isPrimary = true
                        },
                        new
                        {
                            AddressId = new Guid("179e627d-26a5-4a4b-b0a2-331518945036"),
                            AddressValue = "Street-1 Region X Buiding Y Floor Z",
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac1"),
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51154"),
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f773"),
                            isPrimary = false
                        },
                        new
                        {
                            AddressId = new Guid("179e627d-26a5-4a4b-b0a2-331518945037"),
                            AddressValue = "Street-1 Region X Buiding Y Floor Z",
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac2"),
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51157"),
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f775"),
                            isPrimary = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeId");

                    b.ToTable("Code", (string)null);

                    b.HasData(
                        new
                        {
                            CodeId = 1,
                            Name = "AddressType"
                        },
                        new
                        {
                            CodeId = 2,
                            Name = "ContactType"
                        });
                });

            modelBuilder.Entity("Entities.Models.CodeValue", b =>
                {
                    b.Property<Guid>("CodeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeValueId");

                    b.HasIndex("CodeId");

                    b.ToTable("CodeValue", (string)null);

                    b.HasData(
                        new
                        {
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac2"),
                            CodeId = 1,
                            Value = "Home"
                        },
                        new
                        {
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac3"),
                            CodeId = 1,
                            Value = "Work"
                        },
                        new
                        {
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac1"),
                            CodeId = 1,
                            Value = "Summer"
                        },
                        new
                        {
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac5"),
                            CodeId = 2,
                            Value = "Mobile"
                        },
                        new
                        {
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddad1"),
                            CodeId = 2,
                            Value = "Home"
                        });
                });

            modelBuilder.Entity("Entities.Models.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodeValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("ContactId");

                    b.HasIndex("CodeValueId");

                    b.HasIndex("StudentId");

                    b.ToTable("Contact", (string)null);

                    b.HasData(
                        new
                        {
                            ContactId = new Guid("120e7474-5b9a-4b5a-95ed-1e138233f30b"),
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac5"),
                            ContactValue = "12345678",
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f771"),
                            isPrimary = true
                        },
                        new
                        {
                            ContactId = new Guid("120e7474-5b9a-4b5a-95ed-1e138233f30c"),
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac5"),
                            ContactValue = "12345678",
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f772"),
                            isPrimary = true
                        },
                        new
                        {
                            ContactId = new Guid("120e7474-5b9a-4b5a-95ed-1e138233f30d"),
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac5"),
                            ContactValue = "12345678",
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f773"),
                            isPrimary = true
                        },
                        new
                        {
                            ContactId = new Guid("120e7474-5b9a-4b5a-95ed-1e138233f30e"),
                            CodeValueId = new Guid("86189048-87ba-4d2d-942e-d55db1eddac5"),
                            ContactValue = "12345678",
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f771"),
                            isPrimary = false
                        });
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a52"),
                            CountryName = "Lebanon"
                        },
                        new
                        {
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a53"),
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a54"),
                            CountryName = "Syria"
                        },
                        new
                        {
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a55"),
                            CountryName = "Jordan"
                        });
                });

            modelBuilder.Entity("Entities.Models.Region", b =>
                {
                    b.Property<Guid>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Region", (string)null);

                    b.HasData(
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51150"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a52"),
                            RegionName = "Beirut"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51151"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a52"),
                            RegionName = "Hamra"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51152"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a52"),
                            RegionName = "Tripoli"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51153"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a52"),
                            RegionName = "Sayda"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51154"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a53"),
                            RegionName = "Paris"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51155"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a53"),
                            RegionName = "Nouvelle"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51156"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a53"),
                            RegionName = "Auvergne"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51157"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a54"),
                            RegionName = "Hims"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51158"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a54"),
                            RegionName = "Damascus "
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51159"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a55"),
                            RegionName = "Irbid"
                        },
                        new
                        {
                            RegionId = new Guid("2a46c752-0c8b-486e-9674-d86e37c51160"),
                            CountryId = new Guid("19b427fc-c141-48d4-9d7c-b7dee4074a55"),
                            RegionName = "Mafraq"
                        });
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.ToTable("Student", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f771"),
                            DateOfBirth = new DateTime(2003, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentName = "Omar Oueidat",
                            gender = 0
                        },
                        new
                        {
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f772"),
                            DateOfBirth = new DateTime(2003, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentName = "Alex Alex",
                            gender = 0
                        },
                        new
                        {
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f773"),
                            DateOfBirth = new DateTime(2003, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentName = "John John",
                            gender = 0
                        },
                        new
                        {
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f774"),
                            DateOfBirth = new DateTime(2003, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentName = "June",
                            gender = 1
                        },
                        new
                        {
                            StudentId = new Guid("1f41f8fa-a6b6-40f4-8ae1-b0caeec7f775"),
                            DateOfBirth = new DateTime(2003, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentName = "Query",
                            gender = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.CodeValue", "CodeValue")
                        .WithMany()
                        .HasForeignKey("CodeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", null)
                        .WithMany("Addresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeValue");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Entities.Models.CodeValue", b =>
                {
                    b.HasOne("Entities.Models.Code", null)
                        .WithMany()
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Contact", b =>
                {
                    b.HasOne("Entities.Models.CodeValue", "CodeValue")
                        .WithMany()
                        .HasForeignKey("CodeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", null)
                        .WithMany("Contacts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeValue");
                });

            modelBuilder.Entity("Entities.Models.Region", b =>
                {
                    b.HasOne("Entities.Models.Country", null)
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
